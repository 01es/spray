/*
 * Copyright (C) 2011,2012 Mathias Doenitz, Johannes Rudolph
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package cc.spray.json

trait ProductFormatsInstances { self: ProductFormats =>
[#  // Case classes with 1 parameters

  def jsonFormat1[[#P1 :JF#], T <: Product :ClassManifest](construct: ([#P1#]) => T): JsonObjectFormat[T] = {
    val Array([#p1#]) = extractFieldNames(classManifest[T])
    jsonFormat(construct)([#p1#])
  }
  def jsonFormat[[#P1#], T <: Product](construct: ([#P1#]) => T)([#p1f: ObjectFieldFormat[P1]#]): JsonObjectFormat[T] = new JsonObjectFormat[T] {
    def writeObject(p: T) = {
      val fields = new collection.mutable.ListBuffer[(String, JsValue)]
      fields.sizeHint(1 * 2)
      [#fields ++= p1f.fromValue(p.productElement(0).asInstanceOf[P1])#
      ]
      JsObject(fields: _*)
    }
    def readObject(value: JsObject) = Validated {
      val fields = value.fields
      [#val p1V = p1f.fromFields(fields).get#
      ]
      construct([#p1V#])
    }
  }#

]
}
